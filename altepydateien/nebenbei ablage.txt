import time
import datetime
print(time.localtime())
#das umwandeln in die uhrzeit dann für grafik
#now = time.time()
now = time.ctime()
print(now)

import time


x = str(time.ctime())
stelle = 0
x = list(x)
for i in x:
    print(i)
    if i == ':':
        i = ' '
        x[stelle] = i
    stelle = stelle + 1
print(type(x))
print(type(str(x)))
z = ''
for i in x:
    z = z + i

MC-Seite:
usbPort = open("/dev/ttyUSB0", w)
messwerte = 'ab cd ef gh ij\n'  # 5 Messwerte als String, Trenner Leerzeichen, \n = Zeilenende
usbPort.write(messwerte)
usbPort.close()

PC-Seite:
usbPort = open("/dev/ttyUSB0",r)
messwerte = usbPort.readline() # Zeile aus mehreren Messwerten lesen
usbPort.close()
print (messwerte)

# listen aller ports
import os
os.system('python -m serial.tools.list_ports')


usbPort = open('COM4','r')
messwerte = usbPort.readline() # Zeile aus mehreren Messwerten lesen
usbPort.close()
print (messwerte)

#test pyqt

import sys
import random
from PySide6 import QtCore, QtWidgets, QtGui



class MyWidget(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()

        self.hello = ["Hallo Welt", "Hei maailma", "Hola Mundo", "Привет мир"]

        self.button = QtWidgets.QPushButton("Click me!")
        self.text = QtWidgets.QLabel("Hello World", alignment=QtCore.Qt.AlignCenter)

        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.addWidget(self.text)
        self.layout.addWidget(self.button)

        self.button.clicked.connect(self.magic)

    @QtCore.Slot()
    def magic(self):
        self.text.setText(random.choice(self.hello))


if __name__ == "__main__":
    app = QtWidgets.QApplication([])

    widget = MyWidget()
    widget.resize(800, 600)
    widget.show()

    sys.exit(app.exec())


#test qyqt graph

import pyqtgraph.examples
pyqtgraph.examples.run()

#das test ding mit coolem graph zeug

# -*- coding: utf-8 -*-
"""
Various methods of drawing scrolling plots.
"""

import random
import pyqtgraph as pg
from pyqtgraph.Qt import QtCore, QtGui
import numpy as np

win = pg.GraphicsLayoutWidget(show=True)
win.setWindowTitle('pyqtgraph example: Scrolling Plots')


# 2) Allow data to accumulate. In these examples, the array doubles in length
#    whenever it is full.
win.nextRow()

p4 = win.addPlot()
# Use automatic downsampling and clipping to reduce the drawing load

p4.setDownsampling(mode='peak')

p4.setClipToView(True)



curve4 = p4.plot()

data3 = np.empty(100)
ptr3 = 0


def update2():
    global data3, ptr3
    data3[ptr3] = random.randint(1,5) #zufälliger wert für die näcghste stelle
    ptr3 += 1   #erhöh die stelle
    if ptr3 >= data3.shape[0]: #wenn die listenlänge ereicht wird
        tmp = data3 # datenliste wird in temp gespeicher
        data3 = np.empty(data3.shape[0] * 2) # die datenlistenlänge wird verdoppelt
        data3[:tmp.shape[0]] = tmp #daten werden in die längere liste gepackt

    curve4.setData(data3[:ptr3])    # graph wird mitder aktualisiereten datenliste erzeugt

def update():   #führt das uptadet aus
    update2()


timer = pg.QtCore.QTimer() #timer wird qt timer klasse zugewiesen
timer.timeout.connect(update) #immer bei derpause wird update ausgeführt
timer.start(1000)    #timer aller (ms)

if __name__ == '__main__':
    pg.exec()

import threading

class datenthread (threading.Thread):
   def __init__(self, threadID, name):
      threading.Thread.__init__(self)
      self.threadID = threadID
      self.name = name
   def run(self):
      print ("Starting " + self.name)

      print ("Exiting " + self.name)

class grafikthread (threading.Thread):
   def __init__(self, threadID, name):
      threading.Thread.__init__(self)
      self.threadID = threadID
      self.name = name

   def run(self):
      print ("Starting " + self.name)
      print ("Exiting " + self.name)


# Create new threads
thread1 = datenthread(1, "datenthread")
thread2 = grafikthread(2, "grafikthread")

# Start new Threads
thread1.start()
thread2.start()
thread1.join()
thread2.join()
print ("Exiting Main Thread")